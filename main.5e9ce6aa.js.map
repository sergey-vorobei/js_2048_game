{"version":3,"sources":["scripts/Components/Tile.js","scripts/Components/Grid.js","scripts/Components/View.js","scripts/Components/Game.js","scripts/main.js"],"names":["Tile","coords","value","Math","random","row","cell","index","htmlElement","undefined","htmlNode","tileContainer","append","remove","Grid","view","currentScore","currentMargeTile","checkedToAddTile","matrix","init","addTile","update","emptyCells","forEach","rowIndex","cellIndex","push","getAllEmptyCells","length","floor","tile","getRandomEmptyCell","setHtmlElement","createTileElement","addTileToPage","i","j","reverse","r","next","start","increment","setNewCoords","setTilePosition","removeHtmlElement","moveTilesOnXAxis","addTileAfterMove","moveTilesOnYAxis","View","document","querySelector","cells","querySelectorAll","gameField","gameScore","messageContainer","statusName","messageText","message","createElement","className","innerHTML","flat","offsetTop","offsetLeft","top","offsetHeight","left","offsetWidth","getTilePosition","style","filter","el","Game","score","winValue","grid","handleEvent","handleKey","bind","handleTouchStart","handleTouchMove","initEvents","resetTiles","updateGameScore","removeEvents","addEventListener","removeEventListener","e","firstTouch","touches","x1","clientX","y1","clientY","x2","y2","xDiff","yDiff","abs","moveRight","moveLeft","moveDown","moveUp","printMessage","isGameOver","target","key","game","button","messageStart","reset","classList","add"],"mappings":"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","file":"main.5e9ce6aa.js","sourceRoot":"../src","sourcesContent":["export class Tile {\n  constructor(coords) {\n    this.value = Math.random() < 0.9 ? 2 : 4;\n\n    this.coords = {\n      row: coords.row,\n      cell: coords.cell,\n      index: coords.index,\n    };\n\n    this.htmlElement = undefined;\n  }\n\n  setHtmlElement(htmlNode) {\n    this.htmlElement = htmlNode;\n  }\n\n  addTileToPage(tileContainer) {\n    tileContainer.append(this.htmlElement);\n  }\n\n  removeHtmlElement() {\n    this.htmlElement.remove();\n  }\n\n  setNewCoords(row, cell) {\n    this.coords = {\n      row: row,\n      cell: cell,\n      index: cell + row * 4,\n    };\n  }\n}\n","import { Tile } from './Tile';\n\nexport class Grid {\n  constructor(view) {\n    this.view = view;\n    this.currentScore = 0;\n    this.currentMargeTile = 0;\n    this.checkedToAddTile = false;\n\n    this.matrix = [\n      [null, null, null, null],\n      [null, null, null, null],\n      [null, null, null, null],\n      [null, null, null, null],\n    ];\n\n    this.init();\n  }\n\n  init() {\n    this.addTile();\n    this.addTile();\n    this.view.update(this.matrix);\n  }\n\n  getAllEmptyCells() {\n    const emptyCells = [];\n\n    this.matrix.forEach((row, rowIndex) => {\n      row.forEach((cell, cellIndex) => {\n        if (cell === null) {\n          emptyCells.push({\n            row: rowIndex,\n            cell: cellIndex,\n            index: cellIndex + rowIndex * 4,\n          });\n        }\n      });\n    });\n\n    return emptyCells;\n  }\n\n  getRandomEmptyCell() {\n    const emptyCells = this.getAllEmptyCells();\n\n    if (emptyCells.length) {\n      return emptyCells[Math.floor(Math.random() * emptyCells.length)];\n    }\n  }\n\n  addTile() {\n    const tile = new Tile(this.getRandomEmptyCell());\n\n    tile.setHtmlElement(this.view.createTileElement());\n    tile.addTileToPage(this.view.tileContainer);\n    this.matrix[tile.coords.row][tile.coords.cell] = tile;\n  }\n\n  isGameOver() {\n    for (let i = 0; i < this.matrix.length; i++) {\n      for (let j = 0; j < this.matrix.length - 1; j++) {\n        if ((this.matrix[i][j] && this.matrix[i][j + 1])\n          && (this.matrix[i][j].value === this.matrix[i][j + 1].value)) {\n          return false;\n        }\n\n        if ((this.matrix[j][i] && this.matrix[j + 1][i])\n          && (this.matrix[j][i].value === this.matrix[j + 1][i].value)) {\n          return false;\n        }\n\n        if (this.getAllEmptyCells().length > 0) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  moveTilesOnXAxis(reverse = false) {\n    for (let r = 0; r < this.matrix.length; r++) {\n      let start = reverse ? this.matrix.length - 1 : 0;\n      let next = reverse ? start - 1 : 1;\n      const increment = reverse ? -1 : 1;\n\n      while (next < this.matrix.length && next >= 0) {\n        if (!this.matrix[r][next]) {\n          next += increment;\n        } else {\n          if (!this.matrix[r][start]) {\n            this.matrix[r][start] = this.matrix[r][next];\n            this.matrix[r][start].setNewCoords(r, start);\n            this.matrix[r][next] = null;\n            next += increment;\n            this.checkedToAddTile = true;\n          } else if (this.matrix[r][start].value\n              === this.matrix[r][next].value) {\n            this.matrix[r][start].value *= 2;\n            this.checkedToAddTile = true;\n            this.currentScore += this.matrix[r][start].value;\n            this.currentMargeTile = this.matrix[r][start].value;\n            this.matrix[r][next].setNewCoords(r, start);\n            this.view.setTilePosition(this.matrix[r][start]);\n            this.view.setTilePosition(this.matrix[r][next]);\n            this.matrix[r][next].removeHtmlElement();\n            this.matrix[r][next] = null;\n            start += increment;\n            next += increment;\n          } else {\n            start += increment;\n\n            if (start === next) {\n              next += increment;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  moveTilesOnYAxis(reverse = false) {\n    for (let r = 0; r < this.matrix.length; r++) {\n      let start = reverse ? this.matrix.length - 1 : 0;\n      let next = reverse ? start - 1 : 1;\n      const increment = reverse ? -1 : 1;\n\n      while (next < this.matrix.length && next >= 0) {\n        if (!this.matrix[next][r]) {\n          next += increment;\n        } else {\n          if (!this.matrix[start][r]) {\n            this.matrix[start][r] = this.matrix[next][r];\n            this.matrix[start][r].setNewCoords(start, r);\n            this.matrix[next][r] = null;\n            next += increment;\n            this.checkedToAddTile = true;\n          } else if (this.matrix[start][r].value\n              === this.matrix[next][r].value) {\n            this.matrix[start][r].value *= 2;\n            this.checkedToAddTile = true;\n            this.currentScore += this.matrix[start][r].value;\n            this.currentMargeTile = this.matrix[start][r].value;\n            this.view.setTilePosition(this.matrix[start][r]);\n            this.view.setTilePosition(this.matrix[next][r]);\n            this.matrix[next][r].removeHtmlElement();\n            this.matrix[next][r] = null;\n            start += increment;\n            next += increment;\n          } else {\n            start += increment;\n\n            if (start === next) {\n              next += increment;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  addTileAfterMove() {\n    if (this.checkedToAddTile) {\n      this.addTile();\n    }\n    this.checkedToAddTile = false;\n  }\n\n  moveLeft() {\n    this.moveTilesOnXAxis();\n\n    this.addTileAfterMove();\n  }\n\n  moveRight() {\n    this.moveTilesOnXAxis(true);\n\n    this.addTileAfterMove();\n  }\n\n  moveUp() {\n    this.moveTilesOnYAxis();\n\n    this.addTileAfterMove();\n  }\n\n  moveDown() {\n    this.moveTilesOnYAxis(true);\n\n    this.addTileAfterMove();\n  }\n}\n","export class View {\n  constructor() {\n    this.tileContainer = document.querySelector('.game-field__tile-container');\n    this.cells = document.querySelectorAll('.game-field__cell');\n    this.gameField = document.querySelector('.game-field');\n    this.gameScore = document.querySelector('.game-score');\n    this.messageContainer = document.querySelector('.message-container');\n  }\n\n  printMessage(statusName, messageText) {\n    const message = document.createElement('div');\n\n    message.className = `message message-${statusName}`;\n    message.innerHTML = `${messageText}`;\n    this.messageContainer.append(message);\n  }\n  createTileElement() {\n    return document.createElement('div');\n  }\n\n  update(matrix) {\n    matrix.flat().forEach(tile => {\n      if (tile) {\n        tile.htmlElement.className = `\n          game-field__tile game-field__tile--${tile.value}\n        `;\n        tile.htmlElement.innerHTML = `${tile.value}`;\n        this.setTilePosition(tile);\n      }\n    });\n  }\n\n  getTilePosition(tile) {\n    const { offsetTop, offsetLeft } = this.cells[tile.coords.index];\n\n    return {\n      top: offsetTop / this.gameField.offsetHeight * 100,\n      left: offsetLeft / this.gameField.offsetWidth * 100,\n    };\n  }\n\n  setTilePosition(tile) {\n    // eslint-disable-next-line no-shadow\n    const { top, left } = this.getTilePosition(tile);\n\n    tile.htmlElement.style.top = `${top}%`;\n    tile.htmlElement.style.left = `${left}%`;\n  }\n\n  resetTiles(matrix) {\n    matrix\n      .flat()\n      .filter(el => el)\n      .forEach(el => el.removeHtmlElement());\n  }\n\n  updateGameScore(value) {\n    this.gameScore.innerHTML = value;\n  }\n}\n","import { Grid } from './Grid';\nimport { View } from './View';\n\nexport class Game {\n  constructor() {\n    this.score = 0;\n    this.winValue = 2048;\n    this.view = new View();\n    this.grid = new Grid(this.view);\n    this.handleEvent = this.handleKey.bind(this);\n    this.handleTouchStart = this.handleTouchStart.bind(this);\n    this.handleTouchMove = this.handleTouchMove.bind(this);\n    this.initEvents();\n  }\n\n  reset() {\n    this.view.resetTiles(this.grid.matrix);\n    this.score = 0;\n    this.view.updateGameScore(this.score);\n    this.view.messageContainer.innerHTML = '';\n    this.removeEvents();\n  }\n\n  initEvents() {\n    document.addEventListener('keyup', this.handleEvent);\n    document.addEventListener('touchstart', this.handleTouchStart, false);\n    document.addEventListener('touchmove', this.handleTouchMove, false);\n  }\n  removeEvents() {\n    document.removeEventListener('keyup', this.handleEvent);\n    document.removeEventListener('touchstart', this.handleTouchStart, false);\n    document.removeEventListener('touchmove', this.handleTouchMove, false);\n  }\n\n  handleTouchStart(e) {\n    this.firstTouch = e.touches[0];\n    this.x1 = this.firstTouch.clientX;\n    this.y1 = this.firstTouch.clientY;\n  }\n\n  handleTouchMove(e) {\n    if (!this.x1 || !this.y1) {\n      return false;\n    }\n\n    this.x2 = e.touches[0].clientX;\n    this.y2 = e.touches[0].clientY;\n\n    this.xDiff = this.x2 - this.x1;\n    this.yDiff = this.y2 - this.y1;\n\n    if (Math.abs(this.xDiff) > Math.abs(this.yDiff)) {\n      if (this.xDiff > 0) {\n        this.grid.moveRight();\n      } else {\n        this.grid.moveLeft();\n      }\n    } else {\n      if (this.yDiff > 0) {\n        this.grid.moveDown();\n      } else {\n        this.grid.moveUp();\n      }\n    }\n\n    this.x1 = null;\n    this.y1 = null;\n\n    this.score = this.grid.currentScore;\n    this.view.updateGameScore(this.grid.currentScore);\n    this.view.update(this.grid.matrix);\n\n    if (this.winValue === this.grid.currentMargeTile) {\n      this.removeEvents();\n\n      this.view.printMessage('win', `\n        Winner! Congrats! You did it!\n      `);\n    }\n\n    if (!this.grid.getAllEmptyCells().length && this.grid.isGameOver()) {\n      this.removeEvents();\n\n      this.view.printMessage('lose', `\n        You lose! Restart the game?\n      `);\n    }\n  }\n\n  handleKey(e) {\n    const target = e.key;\n\n    switch (target) {\n      case 'ArrowLeft':\n        this.grid.moveLeft();\n        break;\n      case 'ArrowRight':\n        this.grid.moveRight();\n\n        break;\n      case 'ArrowUp':\n        this.grid.moveUp();\n        break;\n      case 'ArrowDown':\n        this.grid.moveDown();\n        break;\n      default:\n        break;\n    }\n\n    this.score = this.grid.currentScore;\n    this.view.updateGameScore(this.grid.currentScore);\n    this.view.update(this.grid.matrix);\n\n    if (this.winValue === this.grid.currentMargeTile) {\n      this.removeEvents();\n\n      this.view.printMessage('win', `\n        Winner! Congrats! You did it!\n      `);\n    }\n\n    if (!this.grid.getAllEmptyCells().length && this.grid.isGameOver()) {\n      this.removeEvents();\n\n      this.view.printMessage('lose', `\n        You lose! Restart the game?\n      `);\n    }\n  };\n}\n","// 'use strict';\n\nimport { Game } from './Components/Game';\n\nconst button = document.querySelector('.button');\nconst messageStart = document.querySelector('.message');\n\nlet game;\n\nbutton.addEventListener('click', () => {\n  if (game) {\n    game.reset();\n    game = new Game();\n  } else {\n    game = new Game();\n  }\n\n  button.classList.remove('start');\n  button.classList.add('restart');\n  button.innerHTML = 'Restart';\n  messageStart.remove();\n});\n"]}